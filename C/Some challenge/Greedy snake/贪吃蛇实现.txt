首先需要实现一个贪吃蛇程序，我们大概需要如下几个步骤：
1、实现一个游戏的范围，即游戏边界
2、实现一条蛇，包括蛇头和蛇身
3、实现蛇的移动
4、游戏机制
控制，可以通过键盘控制蛇的移动
有食物，蛇头与食物重合之后蛇的长度增加
蛇头碰撞到游戏边界之后即游戏结束
有分数机制

接下来我们依次来进行实现：
1、实现一个游戏边界：
/*（这个不成功，略去）认识图形化界面，初识graphics.h函数：*/

也可以通过移动光标函数来进行实现。宽50，长30。
由此实现了一个游戏边界，接下来，我们应该考虑的是
游戏初始的蛇的大小（长度），位置，食物的位置。
先考虑生成一条蛇，那么这条蛇包括蛇的长度（节数），蛇的位置，
蛇的形状（笑：其实就是你用哪一个字符来表示它）；
所以考虑可以定义一个蛇的每一节的信息作为一个结构。
规定蛇的节数最多有最长游戏边长即50。
即可以：
struct 
{
	int x;
	int y;
} Snake[50];
随机生成食物。
接下来，考虑蛇的移动！
考虑通过键盘控制蛇的移动。
那么就要设定相对应的按钮：
W对应上
S对应下
A对应左
D对应右
这里引用从网上学到的函数：
getch()和kbhit（）；
getch():程序自动读取用户输入的字符，不需要按下回车键；
kbhit():检测用户是否按下键盘
移动蛇的机制：
因为蛇身是随蛇头来移动的，故我们只需要控制蛇头的走向
即可，后面的蛇身每一节跟随前一节蛇身移动就行。
所以当按下W时，蛇的x坐标减1（x代表行数，y代表列数）
按下A时蛇的y坐标减1，以此可推出其他按键。
让蛇身每一节跟随前一节移动，只需把前一节的坐标赋给
后一节即可。
游戏机制
蛇不能撞到自己和围墙
（这个机制可以通过判断坐标重合来确定）
蛇吃到食物后变长并且移动速度加快
（速度可以用Sleep（）函数，变长则只需加上一节蛇身即可）


















